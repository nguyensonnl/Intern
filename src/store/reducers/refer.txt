import { createAsyncThunk, createSlice, nanoid } from "@reduxjs/toolkit";
import axios from "axios";

//Reducer thunks
export const getTodos = createAsyncThunk('todo/todosFetched', async () => {
    const res = await axios.get('https://jsonplaceholder.typicode.com/todos?_limit=5')
    return res.data
})

export const addTodo = createAsyncThunk('todos/todoAdded', async title => {
    const newTodo = {
        id: nanoid(),
        title,
        completed: false
    }

    await axios.post('https://jsonplaceholder.typicode.com/todos', newTodo);

    return newTodo
})

export const deleteTodo = createAsyncThunk('todos/todoDeleted', async todoId => {
    await axios.delete(`https://jsonplaceholder.typicode.com/todos/${todoId}`)
    return todoId
})

const todosSlice = createSlice({
    name: 'todos',
    initialState: {
        allTodos: [

        ]
    },
    reducers: {
        // addTodo: (state, action) => {
        //     state.allTodos.unshift({
        //         id: nanoid(),
        //         title: action.payload,
        //         completed: false
        //     })
        // }
        // addTodo: {
        //     reducer: (state, action) => {
        //         state.allTodos.unshift(action.payload)
        //     },
        //     prepare(title) {
        //         return {
        //             payload: {
        //                 id: nanoid(),
        //                 title,
        //                 completed: false
        //             }
        //         }
        //     }
        // },
        markCompleted: (state, action) => {
            const todoId = action.payload;
            state.allTodos = state.allTodos.map((todo) => {
                if (todo.id === todoId) {
                    todo.completed = !todo.completed
                }
                return todo;
            })
        },
        // deleteTodo: (state, action) => {
        //     const todoId = action.payload;
        //     state.allTodos = state.allTodos.filter(item => item.id !== todoId);
        // },
        // todosFetched(state, action) {
        //     state.allTodos = action.payload
        // }
    },
    extraReducers: {
        //get all todos
        [getTodos.pending]: (state, action) => {
            console.log('Fetching todos from backend...')
        },
        [getTodos.fulfilled]: (state, action) => {
            console.log("done")
            state.allTodos = action.payload
        },
        [getTodos.rejected]: (state, action) => {
            console.log("Failed to get todos!!!");
        },

        //Add todo
        [addTodo.fulfilled]: (state, action) => {
            state.allTodos.unshift(action.payload)
        },

        //Delete todo
        [deleteTodo.fulfilled]: (state, action) => {
            const idTodo = action.payload
            state.allTodos = state.allTodos.filter(item => item.id !== idTodo)
        }
    }

})

//Async action creator, action and reducer dispatch
// export const getTodos = () => {
//     const getTodoAsync = async dispatch => {
//         try {
//             const res = await axios.get('https://jsonplaceholder.typicode.com/todos?_limit=5');
//             dispatch(todosFetched(res.data))
//         } catch (error) {
//             console.log(error)
//         }
//     }
//     return getTodoAsync;
// }

// export const getTodos = () => async dispatch => {
//     try {
//         const res = await axios.get('https://jsonplaceholder.typicode.com/todos?_limit=5');
//         dispatch(todosFetched(res.data))
//     } catch (error) {
//         console.log(error)
//     }
// }

//Reducer
export const todosReducer = todosSlice.reducer;

//Action export
export const {
    //addTodo,
    markCompleted,
    //deleteTodo,
    //getAllTodos,
    //todosFetched
} = todosSlice.actions;


//Selector
export const todoSelector = state => state.todosNewReducer.allTodos

